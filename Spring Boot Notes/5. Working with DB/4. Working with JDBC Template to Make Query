Making Sample DB Query using JDBC Template


Interface:

public interface AuthorDao {
    void create(Author author);

    Optional<Author> findOne(long l);

    List<Author> find();

    void update(long id,Author author);

    void delete(long id);
}


Class Implementation:

public class AuthorDaoImpl implements AuthorDao {
    private final JdbcTemplate jdbcTemplate;

    public AuthorDaoImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public void create(Author author) {
        jdbcTemplate.update("INSERT INTO authors (id,name,age) VALUES (?,?,?)", author.getId(), author.getName(), author.getAge());
    }

    @Override
    public Optional<Author> findOne(long authorId) {
        List<Author> results=jdbcTemplate.query("SELECT id,name,age FROM authors WHERE id=? LIMIT 1",
                new AuthorRowMapper(),authorId);
        return results.stream().findFirst();
    }

    @Override
    public List<Author> find() {
        return jdbcTemplate.query("SELECT id,name,age FROM authors",
                new AuthorRowMapper());
    }

    @Override
    public void update(long id,Author author) {
        jdbcTemplate.update("UPDATE authors SET id=?,name=?,age=? WHERE id=?",author.getId(),author.getName(),author.getAge(),id);
    }

    @Override
    public void delete(long id) {
        jdbcTemplate.update("DELETE FROM books where id=?",id);
    }

    public static class AuthorRowMapper implements RowMapper<Author> {

        @Override
        public Author mapRow(ResultSet rs, int rowNum) throws SQLException {
            return Author.builder()
                    .id(rs.getLong("id"))
                    .name(rs.getString("name"))
                    .age(rs.getInt("age"))
                    .build();
        }
    }
}