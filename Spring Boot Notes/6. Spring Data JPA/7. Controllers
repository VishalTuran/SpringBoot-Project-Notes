Finally we are just left with Presentation Layer, which is handled by Controllers


Author Controller:


		package com.vtapps.quickstart.controllers;

		import com.vtapps.quickstart.Domain.entities.AuthorEntity;
		import com.vtapps.quickstart.Domain.dto.AuthorDto;
		import com.vtapps.quickstart.mappers.Mapper;
		import com.vtapps.quickstart.services.AuthorService;
		import org.springframework.http.HttpStatus;
		import org.springframework.http.ResponseEntity;
		import org.springframework.web.bind.annotation.*;

		import java.util.List;
		import java.util.Optional;
		import java.util.stream.Collectors;

		@RestController
		public class AuthorController {
		    private AuthorService authorService;
		    private Mapper<AuthorEntity, AuthorDto> authorMapper;


		    public AuthorController(AuthorService authorService, Mapper<AuthorEntity, AuthorDto> authorMapper) {
		        this.authorService = authorService;
		        this.authorMapper = authorMapper;
		    }

		    @PostMapping(path = "/authors")
		    public ResponseEntity<AuthorDto> createAuthor(@RequestBody AuthorDto author) {
		        AuthorEntity authorEntity = authorMapper.mapFrom(author);
		        AuthorEntity savedAuthorEntity = authorService.save(authorEntity);
		        return new ResponseEntity<>(authorMapper.mapTo(savedAuthorEntity), HttpStatus.CREATED);
		    }

		    @GetMapping(path= "/authors")
		    public List<AuthorDto> listAuthor(){
		      List<AuthorEntity> authors=authorService.findAll();
		      return authors.stream().map(authorMapper::mapTo)
		              .collect(Collectors.toList());
		    }

		    @GetMapping("/authors/{id}")
		    public ResponseEntity<AuthorDto> findAuthorWithId(@PathVariable("id") Long id){
		        Optional<AuthorEntity> foundAuthor=authorService.findById(id);
		        return foundAuthor.map(authorEntity -> {
		            AuthorDto authorDto=authorMapper.mapTo(authorEntity);
		            return new ResponseEntity<>(authorDto, HttpStatus.OK);
		        }).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
		    }

		    @PutMapping("/authors/{id}")
		    public ResponseEntity<AuthorDto> fullUpdateAuthor(@PathVariable("id") Long id,@RequestBody AuthorDto author) {
		        if(!authorService.isExists(id)){
		            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		        }
		        author.setId(id);
		        AuthorEntity authorEntity = authorMapper.mapFrom(author);
		        AuthorEntity savedAuthorEntity = authorService.save(authorEntity);
		        return new ResponseEntity<>(authorMapper.mapTo(savedAuthorEntity), HttpStatus.CREATED);
		    }

		    @PatchMapping("/authors/{id}")
		    public ResponseEntity<AuthorDto> partialUpdateAuthor(@PathVariable("id") Long id,@RequestBody AuthorDto author) {
		        if(!authorService.isExists(id)){
		            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		        }
		        AuthorEntity authorEntity = authorMapper.mapFrom(author);
		        AuthorEntity savedAuthorEntity = authorService.partialUpdate(id,authorEntity);
		        return new ResponseEntity<>(authorMapper.mapTo(savedAuthorEntity), HttpStatus.OK);
		    }

		    @DeleteMapping("/authors/{id}")
		    public ResponseEntity<String> deleteAuthor(@PathVariable("id") Long id) {
		        if(!authorService.isExists(id)){
		            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		        }
		        authorService.delete(id);
		        return new ResponseEntity<>("Success", HttpStatus.NO_CONTENT);
		    }

		}



BookController Class:


	package com.vtapps.quickstart.controllers;

	import com.vtapps.quickstart.Domain.dto.BookDto;
	import com.vtapps.quickstart.Domain.entities.BookEntity;
	import com.vtapps.quickstart.mappers.Mapper;
	import com.vtapps.quickstart.services.BookService;
	import org.springframework.data.domain.Page;
	import org.springframework.data.domain.Pageable;
	import org.springframework.http.HttpStatus;
	import org.springframework.http.ResponseEntity;
	import org.springframework.web.bind.annotation.*;

	import java.util.List;
	import java.util.Optional;
	import java.util.stream.Collectors;

	@RestController
	public class BookController {
	    private BookService bookService;
	    private Mapper<BookEntity, BookDto> bookMapper;

	    public BookController(BookService bookService,Mapper<BookEntity, BookDto> bookMapper){
	        this.bookService=bookService;
	        this.bookMapper=bookMapper;
	    }

	    @PutMapping("/books/{isbn}")
	    public ResponseEntity<BookDto> createUpdateBook(@PathVariable("isbn") String isbn, @RequestBody BookDto bookDto){
	        BookEntity bookEntity = bookMapper.mapFrom(bookDto);
	        boolean bookExists=bookService.isExists(isbn);
	        BookEntity savedBookEntity = bookService.save(isbn, bookEntity);
	        BookDto savedBookDto=bookMapper.mapTo(savedBookEntity);
	        if(bookExists){
	            return new ResponseEntity<>(savedBookDto,HttpStatus.OK);
	        }else{
	            return new ResponseEntity<>(savedBookDto,HttpStatus.CREATED);
	        }
	    }

	    @PatchMapping("/books/{isbn}")
	    public ResponseEntity<BookDto> partialUpdateBook(@PathVariable("isbn") String isbn, @RequestBody BookDto bookDto){
	        boolean bookExists=bookService.isExists(isbn);
	        if(!bookExists){
	            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	        }
	        BookEntity bookEntity = bookMapper.mapFrom(bookDto);
	        BookEntity savedBookEntity = bookService.partialUpdate(isbn, bookEntity);
	        BookDto savedBookDto=bookMapper.mapTo(savedBookEntity);
	        return new ResponseEntity<>(savedBookDto,HttpStatus.OK);
	    }

	    @GetMapping("/books")
	    public Page<BookDto> findAll(Pageable pageable){
	        Page<BookEntity> bookEntities=bookService.findAll(pageable);
	        return bookEntities.map(bookMapper::mapTo);
	    }

	    @GetMapping("/books/{isbn}")
	    public ResponseEntity<BookDto> findById(@PathVariable("isbn") String isbn){
	        Optional<BookEntity> bookFound=bookService.findById(isbn);
	        return bookFound.map(bookEntity->{
	            BookDto bookDto=bookMapper.mapTo(bookEntity);
	            return new ResponseEntity<>(bookDto,HttpStatus.OK);
	        }).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
	    }

	    @DeleteMapping("/books/{isbn}")
	    public ResponseEntity<String> deleteBook(@PathVariable("isbn") String isbn) {
	        if(!bookService.isExists(isbn)){
	            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	        }
	        bookService.delete(isbn);
	        return new ResponseEntity<>("Success", HttpStatus.NO_CONTENT);
	    }
	}

